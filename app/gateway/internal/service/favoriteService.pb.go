// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.5
// source: favoriteService.pb

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FavoritesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavoriteID       uint32    `protobuf:"varint,1,opt,name=FavoriteID,proto3" json:"FavoriteID,omitempty"`
	FavoriteName     string    `protobuf:"bytes,2,opt,name=FavoriteName,proto3" json:"FavoriteName,omitempty"`
	UserID           uint32    `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UrlInfo          *UrlModel `protobuf:"bytes,4,opt,name=UrlInfo,proto3" json:"UrlInfo,omitempty"`
	FavoriteDetailID uint32    `protobuf:"varint,5,opt,name=FavoriteDetailID,proto3" json:"FavoriteDetailID,omitempty"`
}

func (x *FavoritesRequest) Reset() {
	*x = FavoritesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoritesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoritesRequest) ProtoMessage() {}

func (x *FavoritesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoritesRequest.ProtoReflect.Descriptor instead.
func (*FavoritesRequest) Descriptor() ([]byte, []int) {
	return file_favoriteService_proto_rawDescGZIP(), []int{0}
}

func (x *FavoritesRequest) GetFavoriteID() uint32 {
	if x != nil {
		return x.FavoriteID
	}
	return 0
}

func (x *FavoritesRequest) GetFavoriteName() string {
	if x != nil {
		return x.FavoriteName
	}
	return ""
}

func (x *FavoritesRequest) GetUserID() uint32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *FavoritesRequest) GetUrlInfo() *UrlModel {
	if x != nil {
		return x.UrlInfo
	}
	return nil
}

func (x *FavoritesRequest) GetFavoriteDetailID() uint32 {
	if x != nil {
		return x.FavoriteDetailID
	}
	return 0
}

type FavoritesDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavoritesDetail []*FavoritesModel `protobuf:"bytes,1,rep,name=FavoritesDetail,proto3" json:"FavoritesDetail,omitempty"`
	Code            uint32            `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *FavoritesDetailResponse) Reset() {
	*x = FavoritesDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoritesDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoritesDetailResponse) ProtoMessage() {}

func (x *FavoritesDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoritesDetailResponse.ProtoReflect.Descriptor instead.
func (*FavoritesDetailResponse) Descriptor() ([]byte, []int) {
	return file_favoriteService_proto_rawDescGZIP(), []int{1}
}

func (x *FavoritesDetailResponse) GetFavoritesDetail() []*FavoritesModel {
	if x != nil {
		return x.FavoritesDetail
	}
	return nil
}

func (x *FavoritesDetailResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type CommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favoriteService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favoriteService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResponse.ProtoReflect.Descriptor instead.
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return file_favoriteService_proto_rawDescGZIP(), []int{2}
}

func (x *CommonResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CommonResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_favoriteService_proto protoreflect.FileDescriptor

var file_favoriteService_proto_rawDesc = []byte{
	0x0a, 0x15, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x14, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x07, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x72, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x07, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x17, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0f,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x32,
	0xd9, 0x03, 0x0a, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x0e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x0e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x13, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_favoriteService_proto_rawDescOnce sync.Once
	file_favoriteService_proto_rawDescData = file_favoriteService_proto_rawDesc
)

func file_favoriteService_proto_rawDescGZIP() []byte {
	file_favoriteService_proto_rawDescOnce.Do(func() {
		file_favoriteService_proto_rawDescData = protoimpl.X.CompressGZIP(file_favoriteService_proto_rawDescData)
	})
	return file_favoriteService_proto_rawDescData
}

var file_favoriteService_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_favoriteService_proto_goTypes = []interface{}{
	(*FavoritesRequest)(nil),        // 0: pb.FavoritesRequest
	(*FavoritesDetailResponse)(nil), // 1: pb.FavoritesDetailResponse
	(*CommonResponse)(nil),          // 2: pb.CommonResponse
	(*UrlModel)(nil),                // 3: pb.UrlModel
	(*FavoritesModel)(nil),          // 4: pb.FavoritesModel
}
var file_favoriteService_proto_depIdxs = []int32{
	3, // 0: pb.FavoritesRequest.UrlInfo:type_name -> pb.UrlModel
	4, // 1: pb.FavoritesDetailResponse.FavoritesDetail:type_name -> pb.FavoritesModel
	0, // 2: pb.FavoritesService.FavoriteCreate:input_type -> pb.FavoritesRequest
	0, // 3: pb.FavoritesService.FavoriteUpdate:input_type -> pb.FavoritesRequest
	0, // 4: pb.FavoritesService.FavoriteShow:input_type -> pb.FavoritesRequest
	0, // 5: pb.FavoritesService.FavoriteDelete:input_type -> pb.FavoritesRequest
	0, // 6: pb.FavoritesService.FavoriteDetailsCreate:input_type -> pb.FavoritesRequest
	0, // 7: pb.FavoritesService.FavoriteDetailsShow:input_type -> pb.FavoritesRequest
	0, // 8: pb.FavoritesService.FavoriteDetailsDelete:input_type -> pb.FavoritesRequest
	2, // 9: pb.FavoritesService.FavoriteCreate:output_type -> pb.CommonResponse
	2, // 10: pb.FavoritesService.FavoriteUpdate:output_type -> pb.CommonResponse
	1, // 11: pb.FavoritesService.FavoriteShow:output_type -> pb.FavoritesDetailResponse
	2, // 12: pb.FavoritesService.FavoriteDelete:output_type -> pb.CommonResponse
	2, // 13: pb.FavoritesService.FavoriteDetailsCreate:output_type -> pb.CommonResponse
	1, // 14: pb.FavoritesService.FavoriteDetailsShow:output_type -> pb.FavoritesDetailResponse
	2, // 15: pb.FavoritesService.FavoriteDetailsDelete:output_type -> pb.CommonResponse
	9, // [9:16] is the sub-list for method output_type
	2, // [2:9] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_favoriteService_proto_init() }
func file_favoriteService_proto_init() {
	if File_favoriteService_proto != nil {
		return
	}
	file_favoriteModels_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_favoriteService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoritesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoritesDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favoriteService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_favoriteService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_favoriteService_proto_goTypes,
		DependencyIndexes: file_favoriteService_proto_depIdxs,
		MessageInfos:      file_favoriteService_proto_msgTypes,
	}.Build()
	File_favoriteService_proto = out.File
	file_favoriteService_proto_rawDesc = nil
	file_favoriteService_proto_goTypes = nil
	file_favoriteService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FavoritesServiceClient is the client API for FavoritesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FavoritesServiceClient interface {
	FavoriteCreate(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	FavoriteUpdate(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	FavoriteShow(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*FavoritesDetailResponse, error)
	FavoriteDelete(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	FavoriteDetailsCreate(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	FavoriteDetailsShow(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*FavoritesDetailResponse, error)
	FavoriteDetailsDelete(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type favoritesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoritesServiceClient(cc grpc.ClientConnInterface) FavoritesServiceClient {
	return &favoritesServiceClient{cc}
}

func (c *favoritesServiceClient) FavoriteCreate(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/pb.FavoritesService/FavoriteCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesServiceClient) FavoriteUpdate(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/pb.FavoritesService/FavoriteUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesServiceClient) FavoriteShow(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*FavoritesDetailResponse, error) {
	out := new(FavoritesDetailResponse)
	err := c.cc.Invoke(ctx, "/pb.FavoritesService/FavoriteShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesServiceClient) FavoriteDelete(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/pb.FavoritesService/FavoriteDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesServiceClient) FavoriteDetailsCreate(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/pb.FavoritesService/FavoriteDetailsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesServiceClient) FavoriteDetailsShow(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*FavoritesDetailResponse, error) {
	out := new(FavoritesDetailResponse)
	err := c.cc.Invoke(ctx, "/pb.FavoritesService/FavoriteDetailsShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesServiceClient) FavoriteDetailsDelete(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/pb.FavoritesService/FavoriteDetailsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoritesServiceServer is the server API for FavoritesService service.
type FavoritesServiceServer interface {
	FavoriteCreate(context.Context, *FavoritesRequest) (*CommonResponse, error)
	FavoriteUpdate(context.Context, *FavoritesRequest) (*CommonResponse, error)
	FavoriteShow(context.Context, *FavoritesRequest) (*FavoritesDetailResponse, error)
	FavoriteDelete(context.Context, *FavoritesRequest) (*CommonResponse, error)
	FavoriteDetailsCreate(context.Context, *FavoritesRequest) (*CommonResponse, error)
	FavoriteDetailsShow(context.Context, *FavoritesRequest) (*FavoritesDetailResponse, error)
	FavoriteDetailsDelete(context.Context, *FavoritesRequest) (*CommonResponse, error)
}

// UnimplementedFavoritesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFavoritesServiceServer struct {
}

func (*UnimplementedFavoritesServiceServer) FavoriteCreate(context.Context, *FavoritesRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteCreate not implemented")
}
func (*UnimplementedFavoritesServiceServer) FavoriteUpdate(context.Context, *FavoritesRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteUpdate not implemented")
}
func (*UnimplementedFavoritesServiceServer) FavoriteShow(context.Context, *FavoritesRequest) (*FavoritesDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteShow not implemented")
}
func (*UnimplementedFavoritesServiceServer) FavoriteDelete(context.Context, *FavoritesRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteDelete not implemented")
}
func (*UnimplementedFavoritesServiceServer) FavoriteDetailsCreate(context.Context, *FavoritesRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteDetailsCreate not implemented")
}
func (*UnimplementedFavoritesServiceServer) FavoriteDetailsShow(context.Context, *FavoritesRequest) (*FavoritesDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteDetailsShow not implemented")
}
func (*UnimplementedFavoritesServiceServer) FavoriteDetailsDelete(context.Context, *FavoritesRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteDetailsDelete not implemented")
}

func RegisterFavoritesServiceServer(s *grpc.Server, srv FavoritesServiceServer) {
	s.RegisterService(&_FavoritesService_serviceDesc, srv)
}

func _FavoritesService_FavoriteCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServiceServer).FavoriteCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FavoritesService/FavoriteCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServiceServer).FavoriteCreate(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoritesService_FavoriteUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServiceServer).FavoriteUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FavoritesService/FavoriteUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServiceServer).FavoriteUpdate(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoritesService_FavoriteShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServiceServer).FavoriteShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FavoritesService/FavoriteShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServiceServer).FavoriteShow(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoritesService_FavoriteDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServiceServer).FavoriteDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FavoritesService/FavoriteDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServiceServer).FavoriteDelete(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoritesService_FavoriteDetailsCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServiceServer).FavoriteDetailsCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FavoritesService/FavoriteDetailsCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServiceServer).FavoriteDetailsCreate(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoritesService_FavoriteDetailsShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServiceServer).FavoriteDetailsShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FavoritesService/FavoriteDetailsShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServiceServer).FavoriteDetailsShow(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoritesService_FavoriteDetailsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServiceServer).FavoriteDetailsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FavoritesService/FavoriteDetailsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServiceServer).FavoriteDetailsDelete(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FavoritesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FavoritesService",
	HandlerType: (*FavoritesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FavoriteCreate",
			Handler:    _FavoritesService_FavoriteCreate_Handler,
		},
		{
			MethodName: "FavoriteUpdate",
			Handler:    _FavoritesService_FavoriteUpdate_Handler,
		},
		{
			MethodName: "FavoriteShow",
			Handler:    _FavoritesService_FavoriteShow_Handler,
		},
		{
			MethodName: "FavoriteDelete",
			Handler:    _FavoritesService_FavoriteDelete_Handler,
		},
		{
			MethodName: "FavoriteDetailsCreate",
			Handler:    _FavoritesService_FavoriteDetailsCreate_Handler,
		},
		{
			MethodName: "FavoriteDetailsShow",
			Handler:    _FavoritesService_FavoriteDetailsShow_Handler,
		},
		{
			MethodName: "FavoriteDetailsDelete",
			Handler:    _FavoritesService_FavoriteDetailsDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favoriteService.pb",
}
